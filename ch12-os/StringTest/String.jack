// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/String.jack

/**
 * The String type.
 */
class String {
    field Array string;
    field int max_length;
    field int actual_length;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength) {
      
      if (maxLength < 0) {
        do Sys.error(14);
      }
      if (maxLength > 0) {
        let string = Array.new(maxLength);
      }
      let max_length = maxLength;
      let actual_length = 0;

      return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
     if (~(string = null)) {
        do string.dispose();
     }
     do Memory.deAlloc(this);
     return;
    }

    /** Returns the current length of this String. */
    method int length() {
      return actual_length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
      if ((j < 0) | (j > actual_length - 1)) {
        do Sys.error(15);
      }
      return string[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
      if ((j < 0) | (j > actual_length - 1)) {
        do Sys.error(16);
      }
      let string[j] = c;
      return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
      if (actual_length = max_length) {
        do Sys.error(17);
      }
      let string[actual_length] = c;
      let actual_length = actual_length + 1;
      return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
      if (actual_length = 0) {
        do Sys.error(18);
      }
      let actual_length = actual_length - 1;
      return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
      var int v, i, d;
      var boolean neg;
      let v = 0;
      let i = 0;
      if ((actual_length > 0) & (string[0] = 45)) {
        let neg = true;
        let i = 1;
      } else {
        let neg = false;
      }
      while (i < actual_length) {
        let d = string[i] - 48;
        if ((d < 0) | (d > 9)) {
          if (neg) {
            let v = -v;
          }
          return v;
        }
        let v = v * 10 + d;
        let i = i + 1;
      }
      if (neg) {
        let v = -v;
      }
      return v;
    }

    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int number) {
      var int last, next, c;

      if (max_length = 0) {
        do Sys.error(19);
      }

      let next = number / 10;
      let last = number - (next * 10);
      if (number < 0) {
        let last = -last;
      }
      let c = last + 48;
      if (Math.abs(number) < 10) {
        let actual_length = 0;
        if (number < 0) {
          if (max_length = 1) {
            do Sys.error(19);
          }
          do appendChar(45);
        }
        do appendChar(c);
      } else {
        do setInt(next);
        if (actual_length = max_length) {
          do Sys.error(19);
        }
        do appendChar(c);
      }
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
