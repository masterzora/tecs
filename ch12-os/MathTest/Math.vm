function Math.init 0
push constant 16
call Array.new 1
pop static 1
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 0
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 0
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 0
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 0
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 0
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 0
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 0
add
push constant 32767
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push argument 0
neg
return
goto IF_END_0
label IF_FALSE_0
push argument 0
return
label IF_END_0
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_BEG_1
push local 2
push constant 16
lt
not
if-goto WHILE_END_1
push argument 1
push local 2
call Math.bit 2
if-goto IF_TRUE_2
goto IF_FALSE_2
label IF_TRUE_2
push local 0
push local 1
add
pop local 0
label IF_FALSE_2
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_BEG_1
label WHILE_END_1
push local 0
return
function Math.divide 4
push argument 1
push constant 0
eq
if-goto IF_TRUE_3
goto IF_FALSE_3
label IF_TRUE_3
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE_3
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
pop local 3
push constant 0
push static 1
add
push argument 1
call Math.abs 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 0
call Math.abs 1
pop argument 0
label WHILE_BEG_4
push local 2
not
not
if-goto WHILE_END_4
push constant 32767
push local 0
push static 1
add
pop pointer 1
push that 0
sub
push local 0
push static 1
add
pop pointer 1
push that 0
lt
pop local 2
push local 2
not
if-goto IF_TRUE_5
goto IF_FALSE_5
label IF_TRUE_5
push local 0
push constant 1
add
push static 1
add
push local 0
push static 1
add
pop pointer 1
push that 0
push local 0
push static 1
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
push static 1
add
pop pointer 1
push that 0
push argument 0
gt
pop local 2
push local 2
not
if-goto IF_TRUE_6
goto IF_FALSE_6
label IF_TRUE_6
push local 0
push constant 1
add
pop local 0
label IF_FALSE_6
label IF_FALSE_5
goto WHILE_BEG_4
label WHILE_END_4
label WHILE_BEG_7
push local 0
push constant 1
neg
gt
not
if-goto WHILE_END_7
push local 0
push static 1
add
pop pointer 1
push that 0
push argument 0
gt
not
if-goto IF_TRUE_8
goto IF_FALSE_8
label IF_TRUE_8
push local 1
push local 0
push static 0
add
pop pointer 1
push that 0
add
pop local 1
push argument 0
push local 0
push static 1
add
pop pointer 1
push that 0
sub
pop argument 0
label IF_FALSE_8
push local 0
push constant 1
sub
pop local 0
goto WHILE_BEG_7
label WHILE_END_7
push local 3
if-goto IF_TRUE_9
goto IF_FALSE_9
label IF_TRUE_9
push local 1
neg
pop local 1
label IF_FALSE_9
push local 1
return
function Math.sqrt 4
push argument 0
push constant 0
lt
if-goto IF_TRUE_10
goto IF_FALSE_10
label IF_TRUE_10
push constant 4
call Sys.error 1
pop temp 0
label IF_FALSE_10
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_BEG_11
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END_11
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop local 3
push local 3
push local 3
call Math.multiply 2
pop local 2
push local 2
push argument 0
gt
not
push local 2
push constant 0
gt
and
if-goto IF_TRUE_12
goto IF_FALSE_12
label IF_TRUE_12
push local 3
pop local 0
label IF_FALSE_12
push local 1
push constant 1
sub
pop local 1
goto WHILE_BEG_11
label WHILE_END_11
push local 0
return
function Math.max 0
push argument 0
push argument 1
lt
if-goto IF_TRUE_13
goto IF_FALSE_13
label IF_TRUE_13
push argument 1
return
goto IF_END_13
label IF_FALSE_13
push argument 0
return
label IF_END_13
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE_14
goto IF_FALSE_14
label IF_TRUE_14
push argument 0
return
goto IF_END_14
label IF_FALSE_14
push argument 1
return
label IF_END_14
function Math.bit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
