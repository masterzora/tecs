// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twoToThe;
    static Array work;

    /** Initializes the library. */
    function void init() {
      let work = Array.new(16);
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 32767 + 1;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      } else {
        return x;
      }
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;

      let sum = 0;
      let shiftedX = x;
      let j = 0;

      while (j < 16) {
        if (Math.bit(y, j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
      var int index, quotient, valid_y;
      var int negative;
      if (y = 0) {
        do Sys.error(3);
      }
      let negative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
      let work[0] = Math.abs(y);
      let x = Math.abs(x);
      while (~valid_y) {
        // Make sure y hasn't gone negative
        let valid_y = 32767 - work[index] < work[index];
        if (~valid_y) {
          let work[index + 1] = work[index] + work[index];
          // Check if y is larger than x
          let valid_y = work[index + 1] > x;
          if (~valid_y) {
            let index = index + 1;
          }
        }
      }
      
      while (index > -1) {
        if (~(work[index] > x)) {
          let quotient = quotient + twoToThe[index];
          let x = x - work[index];
        }
       let index = index - 1;
      }
      if (negative) {
        let quotient = -quotient;
      }
      return quotient;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, check, next_y;
      if (x < 0) {
        do Sys.error(4);
      }
      let y = 0;
      let j = 7;
      while (j > -1) {
        let next_y = y + twoToThe[j];
        let check = next_y * next_y;
        if (~(check > x) & (check > 0)) {
          let y = next_y;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a < b) {
        return b;
      } else {
        return a;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      } else {
        return b;
      }
    }

   /** Returns true if the jth bit of x is 1, else false */
   function boolean bit(int x, int j) {
     return ~((x & twoToThe[j]) = 0);
   }
}
