// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
    static Array memory;
    static Array free;

    /** Initializes memory parameters. */
    function void init() {
      let memory = 0;
      let free = 2048;
      return;
    }

    /** Returns the value of the main memory at this address. */
    function int peek(int address) {
      return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
      let memory[address] = value;
      return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function Array alloc(int size) {
      // I've written a best-fit-free-list malloc in C before so I don't
      // much wish to recreate one here.  This'll do.  Besides, it makes
      // everything consistent with the leaky string constants.
      var Array pointer;
      if (size < 1) {
        do Sys.error(5);
      }
      let pointer = free;
      let free = free + size;
      if (free > 16383) {
        do Sys.error(6);
      }
      return pointer;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(Array object) {
      return;
    }    
}
